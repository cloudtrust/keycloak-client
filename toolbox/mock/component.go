// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/keycloak-client/v2/toolbox (interfaces: ComponentTool)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=./mock/component.go -package=mock -mock_names=ComponentTool=ComponentTool github.com/cloudtrust/keycloak-client/v2/toolbox ComponentTool
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	keycloak "github.com/cloudtrust/keycloak-client/v2"
	gomock "go.uber.org/mock/gomock"
)

// ComponentTool is a mock of ComponentTool interface.
type ComponentTool struct {
	ctrl     *gomock.Controller
	recorder *ComponentToolMockRecorder
	isgomock struct{}
}

// ComponentToolMockRecorder is the mock recorder for ComponentTool.
type ComponentToolMockRecorder struct {
	mock *ComponentTool
}

// NewComponentTool creates a new mock instance.
func NewComponentTool(ctrl *gomock.Controller) *ComponentTool {
	mock := &ComponentTool{ctrl: ctrl}
	mock.recorder = &ComponentToolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ComponentTool) EXPECT() *ComponentToolMockRecorder {
	return m.recorder
}

// DeleteComponentEntry mocks base method.
func (m *ComponentTool) DeleteComponentEntry(comp *keycloak.ComponentRepresentation, key string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComponentEntry", comp, key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteComponentEntry indicates an expected call of DeleteComponentEntry.
func (mr *ComponentToolMockRecorder) DeleteComponentEntry(comp, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComponentEntry", reflect.TypeOf((*ComponentTool)(nil).DeleteComponentEntry), comp, key)
}

// FindComponent mocks base method.
func (m *ComponentTool) FindComponent(components []keycloak.ComponentRepresentation) *keycloak.ComponentRepresentation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindComponent", components)
	ret0, _ := ret[0].(*keycloak.ComponentRepresentation)
	return ret0
}

// FindComponent indicates an expected call of FindComponent.
func (mr *ComponentToolMockRecorder) FindComponent(components any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindComponent", reflect.TypeOf((*ComponentTool)(nil).FindComponent), components)
}

// GetComponentEntry mocks base method.
func (m *ComponentTool) GetComponentEntry(comp *keycloak.ComponentRepresentation, key string, out any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentEntry", comp, key, out)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetComponentEntry indicates an expected call of GetComponentEntry.
func (mr *ComponentToolMockRecorder) GetComponentEntry(comp, key, out any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentEntry", reflect.TypeOf((*ComponentTool)(nil).GetComponentEntry), comp, key, out)
}

// GetProviderType mocks base method.
func (m *ComponentTool) GetProviderType() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProviderType")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetProviderType indicates an expected call of GetProviderType.
func (mr *ComponentToolMockRecorder) GetProviderType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProviderType", reflect.TypeOf((*ComponentTool)(nil).GetProviderType))
}

// InitializeComponent mocks base method.
func (m *ComponentTool) InitializeComponent(realmName, idpID string, initial any) (keycloak.ComponentRepresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeComponent", realmName, idpID, initial)
	ret0, _ := ret[0].(keycloak.ComponentRepresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitializeComponent indicates an expected call of InitializeComponent.
func (mr *ComponentToolMockRecorder) InitializeComponent(realmName, idpID, initial any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeComponent", reflect.TypeOf((*ComponentTool)(nil).InitializeComponent), realmName, idpID, initial)
}

// UpdateComponentEntry mocks base method.
func (m *ComponentTool) UpdateComponentEntry(comp *keycloak.ComponentRepresentation, key string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComponentEntry", comp, key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComponentEntry indicates an expected call of UpdateComponentEntry.
func (mr *ComponentToolMockRecorder) UpdateComponentEntry(comp, key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComponentEntry", reflect.TypeOf((*ComponentTool)(nil).UpdateComponentEntry), comp, key, value)
}
